-- -- QUANTUM FOURIER TRANSFORM -- --
-- Implements the quantum fourier transform as a function
-- from a list of qubits to a list of qubits

import Core
import Gates
import List

-- Apply the nth phase gate to each qubit of the list, controlled by a parameter
let rec appphase n q qn =
  match qn with
   [] -> (q, [])
 | q0:qr ->
     (q, qr) <- appphase (n+1) q qr;
     (q0, q) <-* cphase (2 ^ n);
     (q, q0:qr)
;;


-- Quantum Fourier Transform
let rec qft qreg =
  match qreg with
    [] -> []
  | q:reg ->
      (qn, qn1) <- sf_last (q:reg);
      qn1 <- qft qn1;
      (qn, qn1) <- appphase 1 qn qn1;
      qn <-* hadamard;
      qn:qn1
;;


-- Test on three qubits
box [ qubit * qubit * qubit ] (
  fun (q0, q1, q2) ->
     let l = [q0,q1,q2] in
     match qft l with
       [q0,q1,q2] -> (q0, q1, q2)
) ;;

