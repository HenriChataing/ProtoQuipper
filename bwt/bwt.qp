-- This module provides an implementation of the Binary Welded Tree
-- algorithm.

import Core
import List
import Function
import Gates
import Definitions

-- ----------------------------------------------------------------------
-- * Oracle abstraction

-- A data structure to hold an oracle. An oracle encodes a graph, and
-- provides the following information: the tree depth n, the label
-- length m (usually = n + 2), the number of edge colors k, the
-- entrance label, and for each color c in {0..k-1}, a reversible
-- circuit oracle_c(a,b,r).

type oracle =
  Oracle of int                                 -- tree depth n
  	  * int        				-- label length m
	  * int        				-- number of colors k
	  * list bool  				-- entrance label
	  * (int ->    				-- color parameter c
	     list qubit * list qubit * qubit -> -- (a,b,r) inputs
	     list qubit * list qubit * qubit)   -- (a,b,r) outputs

-- ----------------------------------------------------------------------
-- * The diffusion step

-- Perform a single diffusion step of the quantum walk. Here, a and b
-- are m-qubit registers holding node labels to be diffused. r is a
-- control.
let timestep (a,b,r,m) =
  (a,b,r) <- with_ancilla false (fun h ->
    (a,b) <- map2 wGate a b;
    (h,a,b) <- map2_foldl toffoliGate_10 h a b;
    (h,r) <- controlledExpGate h (r, false);
    (h,a,b) <- map2_foldr toffoliGate_10 h a b;
    (a,b) <- map2r wGateInverse a b;
    return ((a,b,r),h)
  );
  return (a,b,r)
;;

-- ----------------------------------------------------------------------
-- * The top-level algorithm

-- The main loop of the binary welded tree algorithm. Because there is
-- currently no built-in real number type in Proto-Quipper, we leave
-- the timestep implicit. Also, since Proto-Quipper currently does not
-- include classical bits or measurements, we return the unmeasured
-- quantum register a.
--
-- qrwbwt :: oracle -> int -> list qubit
let qrwbwt oracle s =
  let Oracle (n,m,k,entrance,oraclefun) = oracle in
  a <- qinit_register entrance;
  a <- with_ancilla_reg (replicate m false) (fun b ->
    (a,b) <- with_ancilla false (fun r ->
      (a,b,r) <- loop s (a,b,r) (fun (a,b,r) ->
        (a,b,r) <- for 0 (k-1) 1 (a,b,r) (fun c -> fun (a,b,r) ->
          (a,b,r) <- oraclefun c (a,b,r);
          (a,b,r) <- timestep (a,b,r,m);
          (a,b,r) <- oraclefun c (a,b,r);
          return (a,b,r)
        );
        return (a,b,r)
      );
      return ((a,b),r)
    );
    return (a,b)
  );
  return a
;;

-- ----------------------------------------------------------------------
-- * The oracle implementation

-- ----------------------------------------------------------------------
-- ** Oracle subroutines

-- The functions in this section implement a particular oracle for a
-- binary welded tree. The oracle is parametric on:
--
-- * the tree depth n;
--
-- * two "welding vectors" f and g, specifying how the leaves of the
-- two binary trees are connected to each other. Specifically, f and g
-- encode the permutations of leaves mapping a to (a xor f) and to
-- (a + g), respectively, where "xor" denotes bitwise exclusive or,
-- and "+" denotes binary addition.

-- Input a node label 'a' of length at least n+1. Negate both 'root'
-- and 'even' if 'a' is a root node.
--
-- parseNodeRoot :: list qubit * qubit * qubit * int -> list qubit * qubit * qubit
let parseNodeRoot (a, root, even, n) =
  (a, (root, even)) <- with_list_range 1 n a (root, even) (fun a (root, even) ->
    ((root, even), a) <- with_disjunction a (fun q ->

      (root, q) <- cnotGate root (q, false);
      (even, q) <- cnotGate even (q, false);

      return ((root, even), q)
    );
    return (a, (root, even))
  );
  return (a, root, even)
;;

-- Input a node label 'a' of length at least n+1. Negate 'even' if the
-- node 'a' occurs at an even height in the tree.
--
-- parseNodeEven :: list qubit * qubit * int -> list qubit * qubit
let parseNodeEven (as, even, n) =
  as <- number_elements as;
  (as, even) <- with_list_range 1 n as even (fun as even ->
    (as, even) <- with_ancilla false (fun flag ->

      (scratches, (flag, even)) <- for_each_mapr as (flag, even) (fun (a, index) (flag, even) ->
        scratch <- qinit false;
        (scratch, flag, a) <- toffoliGate scratch (flag, false) (a, true);
        (even, flag, a) <- toffoliGate_if (is_even index) even (flag, false) (a, true);
        (flag, scratch) <- cnotGate flag (scratch, true);
        return ((a, index, scratch), (flag, even))
      );
      (as, flag) <- for_each_map scratches flag (fun (a, index, scratch) flag ->
        (flag, scratch) <- cnotGate flag (scratch, true);
        (scratch, flag, a) <- toffoliGate scratch (flag, false) (a, true);
        qterm false scratch;
        return ((a, index), flag)
      );
      return ((as, even), flag)
    );
    return (as, even)
  );
  as <- unnumber_elements as;
  return (as, even)
;;

-- Input a node label 'a' of length at least 1, and flags 'root'
-- and 'even' describing whether 'a' is a root and at an even level,
-- respectively. Negate 'isparent' if 'a' has a parent of color
-- 'color' in the tree.
--
-- The qubit 'ismatch' is an ancilla, and 'really' is either false or
-- true. They are jointly used to control uncomputation, so that the
-- following sequence will compute and then uncompute 'testIsParent':
--
-- > ismatch <- qinit false;
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, true, ismatch);
-- > (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, false, ismatch);
-- > qterm false ismatch;
--
-- testIsParent :: list qubit * qubit * qubit * qubit * list bool * int * bool * qubit -> list qubit * qubit * qubit * qubit * qubit
let testIsParent (a, root, even, isparent, color, n, really, ismatch) =
  (a0, as) <- sf_head a;
  (isparent, root, ismatch) <- toffoliGate_if (not really) isparent (root, false) (ismatch, true);
  (ismatch, isparent, even, a0) <- (match color with
    [true, true] ->
      (ismatch, even, a0) <- toffoliGate ismatch (even, true) (a0, true);
      return (ismatch, isparent, even, a0)
  | [false, true] ->
      (ismatch, even, a0) <- toffoliGate ismatch (even, true) (a0, false);
      return (ismatch, isparent, even, a0)
  | [true, false] ->
      (isparent, even, a0) <- toffoliGate isparent (even, false) (a0, true);
      return (ismatch, isparent, even, a0)
  | [false, false] ->
      (isparent, even, a0) <- toffoliGate isparent (even, false) (a0, false);
      return (ismatch, isparent, even, a0)
  );
  (isparent, root, ismatch) <- toffoliGate isparent (root, false) (ismatch, true);
  a <- a0 : as;
  return (a, root, even, isparent, ismatch)
;;

-- Consider a node 'a', and negate 'ischild' if 'a' has a child node
-- of color 'color'. Also set 'direction' to indicate whether it is a
-- "left" or "right" child. Here, 'color' is a boolean register of
-- length 2, representing a color. This function is self-inverse.
--
-- testIsChild :: qubit * qubit * qubit * list bool * int -> qubit * qubit * qubit
let testIsChild (even, ischild, direction, color, n) =
  (ischild, even) <- cnotGate ischild (even, not (color @ 1));
  direction <- qnot_if (color @ 0) direction;
  return (even, ischild, direction)
;;

-- Input a node label 'a' of length at least n+2, and a flag
-- 'isparent' that has been initialized accordingly. Also input a
-- register 'b' of length at least n+2, initialized to 0.  If
-- 'isparent' is set, set 'b' to the node label of the parent of
-- 'a'. This is self-inverse.
--
-- setParent :: list qubit * list qubit * qubit * int -> list qubit * list qubit * qubit
let setParent (a, b, isparent, n) =

  (a, (b, isparent)) <- with_list_range 1 n a (b, isparent) (fun as (b, isparent) ->
    (b, (as, isparent)) <- with_list_range 0 (n-1) b (as, isparent) (fun bs (as, isparent) ->
      (as, bs, isparent) <- for_each_map2 as bs isparent (fun a b isparent ->
        (b, isparent, a) <- toffoliGate b (isparent, true) (a, true);
        return (a, b, isparent)
      );
      return (bs, (as, isparent))
    );
    return (as, (b, isparent))
  );

  (a, (b, isparent)) <- with_list_index (n+1) a (b, isparent) (fun a (b, isparent) ->
    (b, (a, isparent)) <- with_list_index (n+1) b (a, isparent) (fun b (a, isparent) ->
      (b, isparent, a) <- toffoliGate b (isparent, true) (a, true);
      return (b, (a, isparent))
    );
    return (a, (b, isparent))
  );

  return (a, b, isparent)
;;

-- Input a node label 'a', and a register 'b' initialized to 0. If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'g'. This is self-inverse. Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'g' is a boolean
-- register of length n.
--
-- doWeld0 :: list qubit * list qubit * qubit * list bool * int -> list qubit * list qubit * qubit
let doWeld0 (a, b, weldctrl, f, n) =

  (abefore, as, aafter) <- sf_list_range 0 (n-1) a;
  (bbefore, bs, bafter) <- sf_list_range 0 (n-1) b;
  (fbefore, fs, fafter) <- sf_list_range 0 (n-1) f;

  (as, bs, fs, weldctrl) <- for_each_map3 as bs fs weldctrl (fun ai bi fi weldctrl ->
    (bi, weldctrl, ai) <- toffoliGate bi (weldctrl, true) (ai, not fi);
    return (ai, bi, fi, weldctrl)
  );

  a <- sf_list_unrange (abefore, as, aafter);
  b <- sf_list_unrange (bbefore, bs, bafter);
  f <- sf_list_unrange (fbefore, fs, fafter);

  return (a, b, weldctrl)
;;

-- majority q (a, b, n): negate q iff the majority of a, b, and n is 1.
-- Here, a and b are qubits, and n is a boolean.
--
-- majority :: qubit -> qubit * qubit * bool -> qubit * qubit * qubit
let majority q (a, b, n) =
  if n then   -- q += (a or b)
    (q, a) <- cnotGate q (a, true);
    (q, a, b) <- toffoliGate q (a, true) (b, true);
    (q, b) <- cnotGate q (b, true);
    return (q, a, b)
  else        -- q += (a and b)
    (q, a, b) <- toffoliGate q (a, true) (b, true);
    return (q, a, b)
;;

-- This function implements integer addition with carry. Input a
-- quantum register 'input', a boolean register 'num', representing
-- integers, a quantum register 'output' initialized to 0, and a qubit
-- 'carry'. If 'control' is set, set 'output' to 'input' + 'num' +
-- 'carry', otherwise do nothing. The registers 'input' and 'carry'
-- are unmodified, and the function is self-inverse. The register
-- 'input', 'output', and 'num' must all have equal length. The
-- integers are represented in little-headian order, i.e., the head of
-- the list holds the least significant bit.
--
-- cAddNum_carry :: qubit * list qubit * list qubit * list bool * qubit -> qubit * list qubit * list qubit * qubit
let rec cAddNum_carry (control, output, input, num, carry) =
  match (output, input, num) with
    ([], [], []) ->
      return (control, [], [], carry)
  | (o:os, i:is, n:ns) ->
      (o, i, control) <- toffoliGate o (i, true) (control, true);
      (o, control) <- cnotGate_if n o (control, true);
      (o, carry, control) <- toffoliGate o (carry, true) (control, true);
      (control, os, is, carry, i) <- with_ancilla false (fun carry2 ->
        (carry2, i, carry) <- majority carry2 (i, carry, n);
        (control, os, is, carry2) <- cAddNum_carry (control, os, is, ns, carry2);
        (carry2, carry, i) <- majority carry2 (carry, i, n);
	return ((control, os, is, carry, i), carry2)
      );
      return (control, o:os, i:is, carry)
;;

-- This function implements integer addition. Input a quantum register
-- 'input' and a boolean register 'num', representing integers, and a
-- quantum register 'output' initialized to 0. If 'control' is set, set
-- 'output' to 'input' + 'num', otherwise do nothing.  Here 'input',
-- 'output', and 'num' are registers of length at least n.
--
-- Our implementation deviates from the GFI-specified one, because in
-- a functional language, it is more natural to implement addition
-- recursively. However, we did this in such a way that the resulting
-- sequence of gates is still the "orthodox" one. (### check this)
--
-- cAddNum :: qubit * list qubit * list qubit * list bool * int -> qubit * list qubit * list qubit
let cAddNum (control, output, input, num, n) =
  -- Trim the lists to length n.
  (output, orest) <- list_split n output;
  (input, irest) <- list_split n input;
  (num, nrest) <- list_split n num;

  (control, output, input) <- (
    match (output, input, num) with
      ([], [], []) ->
        return (control, [], [])
    | (o:os, i:is, n:ns) ->
        (o, i, control) <- toffoliGate o (i, true) (control, true);
        (o, control) <- cnotGate_if n o (control, true);
        (control, os, is, i) <- with_ancilla false (fun carry ->
          (carry, i) <- cnotGate_if n carry (i, true);
          (control, os, is, carry) <- cAddNum_carry (control, os, is, ns, carry);
          (carry, i) <- cnotGate_if n carry (i, true);
  	  return ((control, os, is, i), carry)
        );
        return (control, o:os, i:is)
  );

  -- Untrim the lists.
  output <- list_unsplit (output, orest);
  input <- list_unsplit (input, irest);

  return (control, output, input)
;;


-- DUMMY FUNCTIONS: not yet implemented. ###
let cSubNum (addsub, b, a, g, n) = (addsub, b, a);;

-- Input a node label 'a', and a register 'b' initialized to 0. If
-- 'weldctrl' is set, set 'b' to the node connected to 'a' by the
-- welding function 'f'. This is self-inverse. Here, 'a' and 'b' are
-- quantum registers of length at least n+2, and 'f' is a boolean
-- register of length n.
let doWeld1 (a, b, weldctrl, g, n) =
  (a, b, weldctrl) <- with_ancilla false (fun addsub ->

    (as, an1, aafter) <- sf_list_index (n+1) a;

    (addsub, weldctrl, an1) <- toffoliGate addsub (weldctrl, true) (an1, false);
    (addsub, b, as) <- cAddNum (addsub, b, as, g, n);
    (addsub, weldctrl) <- cnotGate addsub (weldctrl, true);
    (addsub, b, as) <- cSubNum (addsub, b, as, g, n);
    (addsub, weldctrl, an1) <- toffoliGate addsub (weldctrl, true) (an1, true);

    a <- sf_list_unindex (as, an1, aafter);

    return ((a, b, weldctrl), addsub)
  );
  return (a, b, weldctrl)
;;

-- A special case of 'setChild', where the child is in the opposite
-- binary tree, i.e., we follow one of the welding edges.
--
-- setWeld :: list qubit * list qubit * qubit * qubit * list bool * list bool * int -> list qubit * list qubit * qubit * qubit
let setWeld (a, b, childctrl, direction, f, g, n) =
  (a, b, childctrl, direction) <- with_ancilla false (fun weldctrl ->
    (weldctrl, childctrl, direction) <- toffoliGate weldctrl (childctrl, true) (direction, false);
    (a, b, weldctrl) <- doWeld0 (a, b, weldctrl, f, n);
    (weldctrl, childctrl) <- cnotGate weldctrl (childctrl, true);
    (a, b, weldctrl) <- doWeld1 (a, b, weldctrl, g, n);
    (weldctrl, childctrl, direction) <- toffoliGate weldctrl (childctrl, true) (direction, true);

    (abefore, an1, aafter) <- sf_list_index (n+1) a;
    (bbefore, [bn, bn1], bafter) <- sf_list_range n (n+1) b;
    (bn1, childctrl, an1) <- toffoliGate bn1 (childctrl, true) (an1, true);
    (bn, childctrl) <- cnotGate bn (childctrl, true);
    (bn1, childctrl) <- cnotGate bn1 (childctrl, true);
    b <- sf_list_unrange (bbefore, [bn, bn1], bafter);
    a <- sf_list_unindex (abefore, an1, aafter);

    return ((a, b, childctrl, direction), weldctrl)
  );
  return (a, b, childctrl, direction)
;;

-- A special case of 'setChild', where the child is inside the same
-- binary tree (i.e., not via the welding).
--
-- setChildInTree :: list qubit * list qubit * qubit * qubit * int -> list qubit * list qubit * qubit * qubit
let setChildInTree (a, b, childctrl, direction, n) =
  (bbefore, b0, bafter) <- sf_list_index 0 b;
  (b0, childctrl, direction) <- toffoliGate b0 (childctrl, true) (direction, true);
  b <- sf_list_unindex (bbefore, b0, bafter);

  (abefore, as, aafter) <- sf_list_range 0 (n-1) a;
  (bbefore, bs, bafter) <- sf_list_range 1 n b;
  (as, bs, childctrl) <- for_each_map2 as bs childctrl (fun a b childctrl ->
    (b, childctrl, a) <- toffoliGate b (childctrl, true) (a, true);
    return (a, b, childctrl)
  );
  b <- sf_list_unrange (bbefore, bs, bafter);
  a <- sf_list_unrange (abefore, as, aafter);

  (abefore, an1, aafter) <- sf_list_index (n+1) a;
  (bbefore, bn1, bafter) <- sf_list_index (n+1) b;
  (bn1, childctrl, an1) <- toffoliGate bn1 (childctrl, true) (an1, true);
  a <- sf_list_unindex (abefore, an1, aafter);
  b <- sf_list_unindex (bbefore, bn1, bafter);

  return (a, b, childctrl, direction)
;;

-- Similar to 'setParent', but set 'b' to the node label of the
-- indicated child of 'a'. Here 'a' and 'b' are quantum registers of
-- length at least n+2, and 'f' and 'g' are boolean registers of
-- length n.
--
-- setChild :: list qubit * list qubit * qubit * qubit * list bool * list bool * int -> list qubit * list qubit * qubit * qubit
let setChild (a, b, ischild, direction, f, g, n) =
  (a, b, ischild, direction) <- with_ancilla false (fun childctrl ->
    (a, (childctrl, ischild)) <- with_list_index n a (childctrl, ischild) (fun an (childctrl, ischild) ->
      (childctrl, ischild, an) <- toffoliGate childctrl (ischild, true) (an, true);
      return (an, (childctrl, ischild))
    );
    (a, b, childctrl, direction) <- setWeld (a, b, childctrl, direction, f, g, n);
    (childctrl, ischild) <- cnotGate childctrl (ischild, true);
    (a, b, childctrl, direction) <- setChildInTree (a, b, childctrl, direction, n);
    (a, (childctrl, ischild)) <- with_list_index n a (childctrl, ischild) (fun an (childctrl, ischild) ->
      (childctrl, ischild, an) <- toffoliGate childctrl (ischild, true) (an, false);
      return (an, (childctrl, ischild))
    );
    return ((a, b, ischild, direction), childctrl)
  );
  return (a, b, ischild, direction)
;;

----------------------------------------------------------------------
-- ** The main oracle function

-- The main oracle function.
--
-- oraclefun :: int -> list bool -> list bool -> int -> (list qubit * list qubit * qubit -> list qubit * list qubit * qubit)
let oraclefun n f g c (a,b,r) =
  let color = boolreg_of_int_le 2 c in
  (a,b,r) <- with_ancilla_reg [false, false, false, false, false, false] (fun [root, even, isparent, ischild, direction, ismatch] ->
    (a, root, even) <- parseNodeRoot (a, root, even, n);
    (a, even) <- parseNodeEven (a, even, n);
    (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, true, ismatch);
    (even, ischild, direction) <- testIsChild (even, ischild, direction, color, n);
    (a, b, isparent) <- setParent (a, b, isparent, n);
    (a, b, ischild, direction) <- setChild (a, b, ischild, direction, f, g, n);

    (r, isparent, ischild) <- toffoliGate r (isparent, false) (ischild, false);

    (even, ischild, direction) <- testIsChild (even, ischild, direction, color, n);
    (a, root, even, isparent, ismatch) <- testIsParent (a, root, even, isparent, color, n, false, ismatch);
    (a, even) <- parseNodeEven (a, even, n);
    (a, root, even) <- parseNodeRoot (a, root, even, n);

    return ((a,b,r), [root, even, isparent, ischild, direction, ismatch])
  );
  return (a,b,r)
;;

-- The orthodox oracle. The parameter n is the tree depth.
--
-- orthodox_oracle :: int -> list bool -> list bool -> Oracle
let oracle_orthodox n f g =
  Oracle (n, n+2, 4, replicate (n+1) false ++ [true], oraclefun n f g)
;;

-- ----------------------------------------------------------------------
-- * The main program

-- Display the circuit for size n.
--
-- main :: int -> circ((), list qubit)
let main n =
  let f = cycle n [true, false] in
  let g = cycle n [false, true] in
  box[] (fun () -> qrwbwt (oracle_orthodox n f g) 1)
;;

main 3;;
