
This is Proto-Quipper, a functional programming language for quantum computation. You can browse the source code and
documentation from here.

/General/.  The "Main" module is located in the file ProtoQuipper.hs. It uses the command line options defined in the module "Options" to parse
  the program arguments. When the program detects files, it uses the function 'Typing.Driver.do_everything' to process them. By default, when
  no file is provided, the program switches to interactive mode, described by the module "Interactive".


/Interpreter/. All the modules dedicated to the execution of Proto-Quipper expressions are located in the folder \"Interpret\".
  The module "Interpret.Values" gives the definition of the values of Proto-Quipper and "Interpret.Circuits" defines a /very/ basic circuit system (the Intermediate Representation export
  of circuits is implemented in "Interpret.IRExport"). The main functionality of the interpreter is contained in the module "Interpret.Interpret", with the main
  function 'Interpret.Interpret.interpret'.
  

/Type inference/. Type inference is organized in four main modules:

  * "Typing.Subtyping": defines some useful constraint manipulating functions.

  * "Typing.Ordering": provides a tool for building a poset, and finding a minimum of this poset.

  * "Typing.TypingContext": definition and manipulation of typing contexts.

  * "Typing.TypeInference": principal module, contains the implementation of both the type inference algorithm and the unification algorithm.

/Disclaimer/. This implementation of Proto-Quipper is experimental,
and should be considered \"beta\" software.
